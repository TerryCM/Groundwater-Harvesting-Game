<?xml version="1.0"?>
<!-- $Id$
     vim:sts=2:sw=2:
     Version: $Revision$
 -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="foraging" default="build-all" basedir=".">
  <!-- Load all properties from the build.properties file,
       then define defaults for all the properties.
       NOTE: property definitions in the build.properties file take precedence.
    -->
  <loadproperties srcFile="build.properties">
    <filterchain>
      <tokenfilter>
        <trim/>
      </tokenfilter>
    </filterchain>
  </loadproperties>
  <!-- auto-install ivy if needed -->
  <property name='ivy.install.version' value='2.4.0'/>
  <condition property="ivy.home" value="${env.IVY_HOME}">
	<isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${user.home}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

  <target name="download-ivy" unless="offline">

      <mkdir dir="${ivy.jar.dir}"/>
      <!-- download Ivy from web site so that it can be used even without any special installation -->
      <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
            dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="init-ivy" depends="download-ivy">
    <!-- try to load ivy here from ivy home, in case the user has not already dropped
            it into ant's lib dir (note that the latter copy will always take precedence).
            We will not fail as long as local lib dir exists (it may be empty) and
            ivy is in at least one of ant's lib dir or the local lib dir. -->
      <path id="ivy.lib.path">
          <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
      </path>
      <taskdef resource="org/apache/ivy/ant/antlib.xml"
                uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <!-- default compilation properties -->
  <property name="src.dir" value="src/main/java"/>
  <property name="build.dir" value="target/classes"/>
  <!-- default web & deployment properties -->
  <property name="web.dir" value="src/main/webapp"/>
  <property name="server.port" value="16001"/>
  <property name="server.xml" value="server.xml"/>
  <property name="codebase.url" value="http://${server.address}/${ant.project.name}"/>
  <property name="client.class" value="edu.asu.commons.foraging.client.ForagingClient"/>
  <property name="facilitator.class" value="edu.asu.commons.foraging.facilitator.Facilitator"/>
  <property name="server.class" value="edu.asu.commons.foraging.server.ForagingServer"/>
  <property name="framework.jar" value="sesef-${sesef.version}.jar"/>
  <property name="dist.dir" value="." />
  <property name="resources.dir" value="src/main/resources"/>
  <property name="conf.dir" value="${resources.dir}/configuration"/>
  <!-- test properties -->
  <property name="test.src.dir" value="src/test/java"/>
  <property name="test.build.dir" value="target/test-classes"/>
  <property name="test.results.dir" value="target/surefire-reports"/>
  <property name="javadoc.dir" value="docs/javadoc"/>
  <property name="javadoc.private.dir" value="docs/private"/>
  <property name="lib.dir" value="lib"/>
  <property name="remote.debug.port" value="1044"/>
  <!-- default keystore and jar signing properties, override in build.properties -->
  <property name='keystore.alias' value='foraging' />
  <property name='keystore.file' value='commons.jks' />
  <property name='keystore.storepass' value='default_keystore_storepass' />
  <property name='tsa.url' value='http://timestamp.digicert.com' />

  <available file="${conf.dir}/server.xml" property="configuration.exists"/>
  <available file="${basedir}/build.properties" property="build.properties.exists"/>
  <!-- Set up the CLASSPATH, includes all jars in the lib
       directory and all built files for both the main project
       and the tests -->
  <path id="project.classpath">
    <pathelement location="."/>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${build.dir}"/>
    <pathelement location="${test.build.dir}"/>
    <pathelement location="${resources.dir}"/>
  </path>
  <target name="help">
    <echo>
    NOTE: At minimum you will need to modify the default web.dir and
    server.address properties in the build.properties file before invoking deploy
    or build-all.  

    Currently deploying to ${web.dir} with a web address of ${codebase.url}.

    Experiment server will start on ${server.address}, listening on port ${server.port}.
            
    Available targets:
      compile     - Compile all the source code and tests.
      clean       - Remove all compiled source and test classes and build artifacts.
      purge       - Purges sesef maven/ivy jars in addition to running a clean
      demo        - runs a quickstart demo using configuration files from src/main/resources/configuration/demo and the sample build.properties
      docs        - Create JavaDoc documentation for all source code.
      test        - Run all JUnit in the test source tree.
      build-all   - builds the client, server, and facilitator jars.
      deploy      - invokes build-all and then copies the client and facilitator jars to ${web.dir}
      convert     - invokes the ForagingSaveFileConverter to process the savefiles in the experiment-data directory or as specified by -D DATA_DIR=foo
    </echo>
  </target>
  <target name="build-all" depends="facilitator-jar, client-jar, server-jar, compile"/>
  <target name='check-keystore'>
    <available file='${keystore.file}' property='keystore.present'/>
  </target>
  <target name='generate-keystore' depends='check-keystore' unless='keystore.present'>
    <genkey alias='${keystore.alias}' verbose='true' storepass='${keystore.storepass}'
      validity='365' keystore='${keystore.file}'>
      <dname>
        <param name='CN' value='commons.asu.edu'/>
        <param name='O' value='Arizona State University'/>
        <param name='OU' value='Center for Behavior, Institutions, and the Environment'/>
        <param name='L' value='Tempe'/>
        <param name='ST' value='Arizona'/>
        <param name='C' value='US'/>
      </dname>
    </genkey>
  </target>
  <target name='sign-jars' depends='generate-keystore'>
    <signjar destDir='${dist.dir}' alias='${keystore.alias}' keystore='${keystore.file}' lazy='true' storepass='${keystore.storepass}' tsaurl='${tsa.url}'>
      <path>
        <fileset dir='${dist.dir}' includes='*.jar' />
      </path>
    </signjar>
  </target>
  <target name='sign-dependencies'>
    <signjar destDir='${lib.dir}' alias='${keystore.alias}' keystore='${keystore.file}' lazy='true' storepass='${keystore.storepass}' tsaurl='${tsa.url}'>
      <path>
        <fileset dir='${lib.dir}' includes='*.jar' />
      </path>
    </signjar>
  </target>
  <!-- deploys the client + facilitator + sesef jarfiles to the appropriate
     webapps directory. -->
  <target name="deploy-to" depends="build-all, sign-jars, sign-dependencies">
    <mkdir dir="${deploy.dir}"/>
    <!-- 
    copy client jar, facilitator jar, and sesef.jar to web deployment
    directory 
    -->
    <copy todir="${deploy.dir}" overwrite="true">
      <fileset dir="${dist.dir}">
        <include name="client.jar"/>
        <include name="facilitator.jar"/>
      </fileset>
      <fileset dir="${lib.dir}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${resources.dir}/web">
        <include name="index.html"/>
        <include name="WEB-INF/**"/>
      </fileset>
    </copy>
    <!-- copy images -->
    <copy todir="${deploy.dir}/images" overwrite="true">
      <fileset dir="${resources.dir}/images"/>
    </copy>
    <!-- 
    copy client and facilitator JNLP descriptor files, replacing
    url/main class tokens.
    -->
    <copy file="${resources.dir}/web/client.jnlp" todir="${deploy.dir}" overwrite="true">
      <filterset>
        <filter token="CODEBASE_URL" value="${codebase.url}"/>
        <filter token="MAIN_CLASS" value="${client.class}"/>
        <filter token="FRAMEWORK_JAR" value="${framework.jar}"/>
      </filterset>
    </copy>
    <copy file="${resources.dir}/web/facilitator.jnlp" todir="${deploy.dir}" overwrite="true">
      <filterset>
        <filter token="CODEBASE_URL" value="${codebase.url}"/>
        <filter token="MAIN_CLASS" value="${facilitator.class}"/>
        <filter token="FRAMEWORK_JAR" value="${framework.jar}"/>
      </filterset>
    </copy>
    <chmod dir="${deploy.dir}" perm="664" type="file" includes="**"/>
    <chmod dir="${deploy.dir}" perm="775" type="dir" includes="**"/>
  </target>
  <target name='copy-configuration'>
    <copy todir="${conf.dir}">
      <fileset dir="${conf.dir}/${treatment.dir}"/>
    </copy>
  </target>
  <target name='demo-configuration' unless='${configuration.exists}'>
    <antcall target='copy-configuration'>
      <param name='treatment.dir' value='demo'/>
    </antcall>
  </target>
  <target name='demo-build-properties' unless='${build.properties.exists}'>
    <copy tofile='${basedir}/build.properties' file='${basedir}/build.properties.example'/>
  </target>
  <target name='prepare-demo' depends='demo-configuration,demo-build-properties,compile'>
  </target>
  <target name="demo" depends="prepare-demo">
    <antcall target='deploy'/>
    <parallel>
      <daemons>
        <antcall target='server' />
      </daemons>
      <sequential>
        <sleep seconds='2'/>
        <antcall target='fac'/>
      </sequential>
      <sequential>
        <sleep seconds='3'/>
        <antcall target='client'/>
      </sequential>
      <sequential>
        <sleep seconds='4'/>
        <antcall target='client'/>
      </sequential>
      <sequential>
        <sleep seconds='5'/>
        <antcall target='client'/>
      </sequential>
      <sequential>
        <sleep seconds='6'/>
        <antcall target='client'/>
      </sequential>
      <sequential>
        <sleep seconds='7'/>
        <antcall target='client'/>
      </sequential>
    </parallel>
  </target>
  <target name="deploy" depends="check-configuration,configure" if="${configuration.exists}">
    <antcall target="deploy-to">
      <param name="deploy.dir" value="${web.dir}"/>
    </antcall>
  </target>
  <target name="client-jar" depends="server-jar">
    <antcall target="build-jar">
      <param name="main.class" value="${client.class}"/>
      <param name="jar.name" value="client.jar"/>
    </antcall>
  </target>
  <target name="facilitator-jar" depends="client-jar">
    <antcall target="build-jar">
      <param name="main.class" value="${facilitator.class}"/>
      <param name="jar.name" value="facilitator.jar"/>
    </antcall>
  </target>
  <target name="server-jar" depends="compile, configure">
    <antcall target="build-jar">
      <param name="main.class" value="${server.class}"/>
      <param name="jar.name" value="server.jar"/>
    </antcall>
    <move file="${dist.dir}/server.jar" tofile="server.jar"/>
  </target>
  <target name="build-jar">
    <manifestclasspath property="manifest.classpath" jarfile="${jar.name}">
      <classpath refid="project.classpath"/>
    </manifestclasspath>
    <chmod dir="${build.dir}" perm="a+rx" type="dir" includes="**"/>
    <chmod dir="${build.dir}" perm="a+r" type="file" includes="**"/>
    <manifest file="manifest.mf">
      <attribute name="Application-Name" value="${main.class}"/>
      <attribute name="Main-Class" value="${main.class}"/>
      <attribute name="Class-Path" value="${manifest.classpath}"/>
      <attribute name='Permissions' value='all-permissions' />
    </manifest>
    <jar destfile="${dist.dir}/${jar.name}" manifest="manifest.mf">
      <fileset dir="${build.dir}">
        <include name="edu/asu/commons/**"/>
        <include name="data/**"/>
        <include name="conf/**"/>
        <include name="images/**"/>
      </fileset>
    </jar>
    <chmod file="${dist.dir}/${jar.name}" perm="664"/>
  </target>
  <!-- Prepare for a build by creating appropriate directories -->
  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${test.build.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${lib.dir}"/>
  </target>
  <target name="resolve" description="retrieve dependencies with ivy" depends='init-ivy'>
    <!-- FIXME: should include revision numbers as well, e.g., 
         <ivy:retrieve pattern='${lib.dir}/[artifact]-[revision].[ext]'/>  
         but this makes the rewritten JNLP files a bit trickier. revisit after we implement dropwizard, spark or other
         smarter web deployment
         -->
    <ivy:retrieve/>
  </target>
  <!-- Clean project directory only, leaving ~/.ant and ~/.m2 untouched -->
  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${test.build.dir}"/>
    <delete dir="${lib.dir}"/>
    <delete file="server.jar"/>
    <delete file="client.jar"/>
    <delete file="facilitator.jar"/>
  </target>
  <!-- remove all files in src/main/resources/configuration directory -->
  <target name='clean-configuration'>
    <delete>
      <fileset dir='${conf.dir}' includes='*.xml' />
    </delete>
  </target>
  <!-- delete ivy and maven caches to force reload a new sesef snapshot -->
  <target name="purge" depends="clean">
    <echo message="Removing ${user.home}/.ant/cache"/>
    <delete dir="${user.home}/.ant/cache"/>
    <delete dir="${user.home}/.m2/repository/edu/asu/commons"/>
  </target>
  <!-- fails if requisite build.properties or src/main/resources/configuration/server.xml do not exist -->
  <target name="check-configuration">
    <fail message="Did not find any configuration files in ${conf.dir}, please copy over an appropriate set of configuration files into ${conf.dir}" unless="${configuration.exists}"/>
    <fail message="Please copy build.properties.example to build.properties and edit before proceeding." unless="${build.properties.exists}"/>
  </target>
  <!-- Compile project source files -->
  <target name="compile" depends="prepare, resolve">
    <javac srcdir="${src.dir}" destdir="${build.dir}" debug="on" optimize="off" deprecation="on" includeAntRuntime="false">
      <compilerarg value="-Xlint:unchecked"/>
      <classpath refid="project.classpath"/>
    </javac>
    <copy todir="${build.dir}/images">
      <fileset dir="${resources.dir}/images"/>
    </copy>
  </target>
  <target name="configure">
    <copy todir="${build.dir}/conf">
      <fileset dir="${conf.dir}"/>
      <filterset>
        <filter token="SERVER_ADDRESS" value="${server.address}"/>
        <filter token="PORT_NUMBER" value="${server.port}"/>
        <filter token="CODEBASE_URL" value="${codebase.url}"/>
      </filterset>
    </copy>
  </target>
  <target name="profile" depends="test">
    <java jar="${project.profiler}" classpathref="project.classpath" fork="true">
      <arg value="${hprof.file}"/>
    </java>
    <!-- do something like java -jar PerfAnal.jar <hprof.txt> -->
  </target>
  <!-- Build project documentation -->
  <target name="docs">
    <javadoc sourcepath="${src.dir}" destdir="${javadoc.dir}" packagenames="*" classpathref="project.classpath" overview="${src.dir}/overview.html">
      <link href="http://docs.oracle.com/javase/7/docs/api/"/>
      <link href="http://commons.asu.edu/src/sesef/api"/>
    </javadoc>
  </target>
  <!-- RUN TARGETS -->
  <target name="client" depends="compile">
    <java classname="${client.class}" classpathref="project.classpath" fork="yes"/>
  </target>
  <target name="fac" depends="compile">
    <java classname="${facilitator.class}" classpathref="project.classpath" fork="yes"/>
  </target>
  <target name="deploy-server" depends="deploy, server"/>
  <target name="server" depends="compile,check-configuration">
    <!-- make sure we update the configuration -->
    <copy todir="${build.dir}/conf" overwrite="true">
      <fileset dir="${conf.dir}"/>
      <filterset>
        <filter token="SERVER_ADDRESS" value="${server.address}"/>
        <filter token="PORT_NUMBER" value="${server.port}"/>
        <filter token="CODEBASE_URL" value="${codebase.url}"/>
      </filterset>
    </copy>
    <java classname="${server.class}" classpathref="project.classpath" fork="yes">
      <jvmarg value="-server"/>
    </java>
  </target>
  <target name="server-debug" depends="compile,check-configuration">
    <!-- make sure we update the configuration -->
    <copy todir="${build.dir}/conf" overwrite="true">
      <fileset dir="${conf.dir}"/>
      <filterset>
        <filter token="SERVER_ADDRESS" value="${server.address}"/>
        <filter token="PORT_NUMBER" value="${server.port}"/>
        <filter token="CODEBASE_URL" value="${codebase.url}"/>
      </filterset>
    </copy>
    <java classname="${server.class}" classpathref="project.classpath" fork="yes">
      <jvmarg value="-server"/>
      <!-- Enable remote debugging -->
      <jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${remote.debug.port}"/>
    </java>
  </target>
  <target name='webserver' depends='compile'>

  </target>
  <!-- Compile Tests -->
  <target name="compile-tests" depends="compile">
    <javac srcdir="${test.src.dir}" destdir="${test.build.dir}" debug="on">
      <!-- <compilerarg value='-Xlint:unchecked'/> -->
      <classpath refid="project.classpath"/>
    </javac>
  </target>
  <!-- Run Tests -->
  <target name="test" depends="compile-tests">
    <delete dir="${test.results.dir}"/>
    <mkdir dir="${test.results.dir}"/>
    <junit fork="yes" haltonfailure="yes" printsummary="yes">
      <classpath refid="project.classpath"/>
      <batchtest todir="${test.results.dir}">
        <formatter usefile="no" type="plain"/>
        <formatter type="xml"/>
        <fileset dir="${test.build.dir}">
          <include name="**/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
  <property name="savefile.converter.class" value="edu.asu.commons.foraging.data.ForagingSaveFileConverter"/>
  <!-- default savefile directory is the experiment-data directory -->
  <property environment='env'/>
  <condition property='savefile.dir' value='${env.DATA_DIR}' else='experiment-data'>
    <isset property='env.DATA_DIR' />
  </condition>
  <condition property='xml.enabled' value='${env.XML}' else=''>
    <isset property='env.XML' />
  </condition>
  <target name="convert" depends="compile">
    <java classname="${savefile.converter.class}" classpathref="project.classpath" fork="yes">
      <arg value="${savefile.dir}"/>
      <arg value='${xml.enabled}'/>
    </java>
  </target>
  <!-- Custom Deployment Targets -->
  <target name='deploy-uol' depends='compile,clean-configuration'>
    <antcall target='copy-configuration'>
      <param name='treatment.dir' value='UoL/communication-and-motives'/>
    </antcall>
    <antcall target='deploy' />
  </target>
  <target name='deploy-fmri-a' depends='compile,clean-configuration'>
    <!-- specialized target for fmri aggressive bot deployment -->
    <input message="Select localized version"
      validargs="sv-SE,es-CO"
      addproperty="localized.version" />
    <antcall target='copy-configuration'>
      <param name='treatment.dir' value='asu/2017/fmri/a_${localized.version}' />
    </antcall>
    <antcall target='deploy' />
  </target>
  <target name='deploy-fmri-n' depends='compile,clean-configuration'>
    <input message="Select localized version"
      validargs="sv-SE,es-CO"
      addproperty="localized.version" />
    <!-- specialized target for fmri nice bot deployment -->
    <antcall target='copy-configuration'>
      <param name='treatment.dir' value='asu/2017/fmri/n_${localized.version}' />
    </antcall>
    <antcall target='deploy' />
  </target>
</project>
