package edu.asu.commons.foraging.visualization.forestry;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.Vector;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JTextField;

import edu.asu.commons.foraging.util.BasicDialog;
import edu.asu.commons.foraging.util.BasicFileFilter;
import edu.asu.commons.foraging.visualization.forestry.vbo.ForestryView;




/*
 * ForestryFileSelection.java
 *
 * Created on July 13, 2006, 4:57 PM
 */

public class ForestryFileSelection extends BasicDialog {

	private static final long serialVersionUID = -4754279212611635894L;
	private ForestryView parentView;
	String dataFilePath = System.getProperty("user.dir") + File.separator + "data" + File.separator + "forestry";

    public ForestryFileSelection(ForestryView parentView) {
    	this.parentView = parentView;
        initComponents();
        setTitle("Forestry Experiment");
        setSize(450, 380);
        parentView.centerChildDialog(this);
        setVisible(true);        
        bindUsableComponents(this.getContentPane());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {       
        getContentPane().setLayout(null);                
        setFont(new java.awt.Font("Arial", 0, 10));
        
        JLabel label = new JLabel("Terrain File");
        getContentPane().add(label);
        label.setBounds(10, 10, 90, 20);
        getContentPane().add(getTerrainFile());
        getContentPane().add(getTerrainBrowse());
        
        label = new JLabel("Tree File");
        getContentPane().add(label);
        label.setBounds(10, 40, 90, 20);
        getContentPane().add(getTreeFile());
        getContentPane().add(getTreeBrowse());

        label = new JLabel("Avatar Files");
        getContentPane().add(label);
        label.setBounds(10, 70, 100, 20);

        Vector<Avatar> avatarList = new Vector<Avatar>();
        avatarList.add(new Avatar("Cally", dataFilePath + File.separator + "cally.cfg"));	
		avatarList.add(new Avatar("Paladin", dataFilePath + File.separator + "paladin.cfg"));
		avatarList.add(new Avatar("Skeleton", dataFilePath + File.separator + "skeleton.cfg"));		
        availableAvatars.setModel(new AvatarListModel(avatarList));
        availableAvatars.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        getContentPane().add(availableAvatars);
        availableAvatars.setBounds(10, 100, 150, 190);

        Vector<Avatar> selectedAvatarList = new Vector<Avatar>();
        selectedAvatarList.add(new Avatar("Woodcutter", dataFilePath + File.separator + "woodcutter.cfg"));
        selectedAvatars.setModel(new AvatarListModel(selectedAvatarList));        
        selectedAvatars.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        getContentPane().add(selectedAvatars);
        selectedAvatars.setBounds(250, 100, 150, 190);

        getContentPane().add(getSelect());        
        getContentPane().add(getDeselect());
                
        getContentPane().add(getStart());       
        getContentPane().add(getCancel());
        
        pack();
    }
    // </editor-fold>
    
    private JTextField getTerrainFile() {
    	if (terrainFile == null) {
    		terrainFile = new JTextField(dataFilePath + File.separator + "terrain1.terrain");
    		terrainFile.setBounds(90, 10, 240, 20);
    	}
    	return terrainFile;
    }
    
    private JButton getTerrainBrowse() {
    	if (terrainBrowse == null) {
    		terrainBrowse = new JButton("Browse");
    		terrainBrowse.setBounds(340, 10, 90, 20);
    		
    		terrainBrowse.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					BasicFileFilter filter = new BasicFileFilter();
				    filter.addExtension("terrain");				    
				    filter.setDescription("TERRAIN Files");
				    				    
					JFileChooser fileChooser = new JFileChooser();
					fileChooser.setFileFilter(filter);
					fileChooser.setCurrentDirectory(new File(dataFilePath));
	                int returnVal = fileChooser.showOpenDialog(ForestryFileSelection.this);
	                if (returnVal == JFileChooser.APPROVE_OPTION) {
	                	getTerrainFile().setText(fileChooser.getSelectedFile().getPath());
	                }
				}
			});
    	}
		return terrainBrowse;
	}
        
    private JTextField getTreeFile() {
    	if (treeFile == null) {
    		treeFile = new JTextField(dataFilePath + File.separator + "tree1.tree");
    		treeFile.setBounds(90, 40, 240, 20);
    	}
    	return treeFile;
    }
    
    private JButton getTreeBrowse() {
    	if (treeBrowse == null) {
    		treeBrowse = new JButton("Browse");
    		treeBrowse.setBounds(340, 40, 90, 20);
    		
    		treeBrowse.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					BasicFileFilter filter = new BasicFileFilter();
				    filter.addExtension("tree");				    
				    filter.setDescription("TREE Files");
				    				    
					JFileChooser fileChooser = new JFileChooser();
					fileChooser.setFileFilter(filter);
					fileChooser.setCurrentDirectory(new File(dataFilePath));
	                int returnVal = fileChooser.showOpenDialog(ForestryFileSelection.this);
	                if (returnVal == JFileChooser.APPROVE_OPTION) {
	                	getTreeFile().setText(fileChooser.getSelectedFile().getPath());
	                }
				}
			});
    	}
		return treeBrowse;
	}
    
    private JButton getSelect() {
    	if (select == null) {
    		select = new JButton(">>");
    		select.setBounds(180, 130, 50, 23);
    		
    		select.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				Avatar selectedAvatar = (Avatar)availableAvatars.getSelectedValue();
    				if (selectedAvatar != null) {
    					AvatarListModel listModel = (AvatarListModel)selectedAvatars.getModel();
    					listModel.addElement(selectedAvatar);
    					
    					listModel = (AvatarListModel)availableAvatars.getModel();
    					listModel.removeElement(selectedAvatar);
    					availableAvatars.repaint();
    				}
    			}
    		});
    	}
		return select;
	}
    
    private JButton getDeselect() {
    	if (deselect == null) {
    		deselect = new JButton("<<");
    		deselect.setBounds(180, 170, 51, 23);
    		
    		deselect.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				Avatar selectedAvatar = (Avatar)selectedAvatars.getSelectedValue();
    				if (selectedAvatar != null) {
    					AvatarListModel listModel = (AvatarListModel)selectedAvatars.getModel();
    					listModel.removeElement(selectedAvatar);
    					
    					listModel = (AvatarListModel)availableAvatars.getModel();
    					listModel.addElement(selectedAvatar);
    				}
    			}
    		});
    	}
		return deselect;
	}
    
    private JButton getStart() {
    	if (start == null) {
    		start = new JButton("Start");
    		start.setBounds(160, 300, 80, 23);
    		
    		start.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				String terrainFile = getTerrainFile().getText();
//    				parentView.loadTerrain(terrainFile);
    				
    				String treeFile = getTreeFile().getText();
    				//parentView.loadTree(treeFile);
    				//parentView.loadTestObject(treeFile);
    				
    				Vector<Avatar> selectedAvatarList = ( (AvatarListModel)selectedAvatars.getModel() ).getAvatars();
    				for (int index = 0; index < selectedAvatarList.size(); index++) {
    					Avatar avatar = selectedAvatarList.get(index);
//    					parentView.loadAvatar(avatar.dataFile, new Point3D(0, 0, 0), index+1);
    				}
    				
    				dispose();
    			}
    		});
    	}
		return start;
	}
    
    private JButton getCancel() {
    	if (cancel == null) {
    		cancel = new JButton("Cancel");
    		cancel.setBounds(250, 300, 90, 23);
    		
    		cancel.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				dispose();
    			}
    		});
    	}
		return cancel;
	}
    
	private JTextField terrainFile;
    private JButton terrainBrowse;
    private JTextField treeFile;
    private JButton treeBrowse;
    private JList availableAvatars = new JList();
    private JList selectedAvatars = new JList();
    private JButton select;
    private JButton deselect;
    private JButton start;    
    private JButton cancel;
 
    class AvatarListModel extends DefaultListModel {    	
		private static final long serialVersionUID = 7973828045245274953L;
		protected Vector<Avatar> avatars;
    	
    	public AvatarListModel(Vector<Avatar> avatars) {
    		this.avatars = avatars;   		
    	}    	        	
        
        public int getSize() { 
        	return avatars.size(); 
        }
        
        @Override
        public Object getElementAt(int i) { 
        	Object o;
            try {
                o = avatars.get (i);
            }
            catch (ArrayIndexOutOfBoundsException e) {
                // If we're out of bounds get the last item in the list                
                o = avatars.get(size () - 1);
            }
            return o; 
        }
        
        public Vector<Avatar> getAvatars() {
        	return avatars;
        }
        
        @Override
        public void addElement(Object avatar) {
        	if (!avatars.contains(avatar)) {
        		avatars.add((Avatar)avatar);
        		super.addElement(avatar);
        	}
        }
        
        @Override
        public boolean removeElement(Object avatar) {
        	avatars.remove(avatar);
        	return super.removeElement(avatar);
        }
    }
    
    class Avatar {    	
    	public Avatar (String name, String dataFile) {
    		this.name = name;
    		this.dataFile = dataFile;
    	}
    	
    	public String toString() {
    		return name;
    	}
    	
    	public String name;
    	public String dataFile;
    }    
}
